homeassistant:
  customize:
    vacuum.xiaomi_vacuum_cleaner:
      friendly_name: Mi Mi

group:
  vacuum:
    name: Mi Mi
    entities:
      - vacuum.xiaomi_vacuum_cleaner
      - sensor.vacuum_cleaner_status
      - input_boolean.vacuum_auto_start
      - input_datetime.vacuum_start_time
      - sensor.vacuum_cleaner_error_sensor
      - sensor.vacuum_sensor_timer
      - input_boolean.vacuum_sensor_timer_reset
      - sensor.vacuum_filter_timer
      - input_boolean.vacuum_filter_reset
      - sensor.vacuum_side_brush_timer
      - input_boolean.vacuum_side_brush_reset
      - sensor.vacuum_main_brush_timer
      - input_boolean.vacuum_main_brush_reset

input_datetime:
  vacuum_start_time:
    name: "Vacuum Start Time"
    has_date: false
    has_time: true

input_boolean:
  vacuum_sensor_timer_reset:
    name: "Reset Vacuum Sensor Timer"
    initial: off
  vacuum_main_brush_reset:
    name: "Reset Main Brush Timer"
    initial: off
  vacuum_side_brush_reset:
    name: "Reset Side Brush Timer"
    initial: off
  vacuum_filter_reset:
    name: "Reset Filter Timer"
    initial: off
  vacuum_auto_start:
    name: "Vacuum Auto Start"
  empty_bin:
    name: "Empty Vacuum Bin"

input_number:
  vacuum_error_count:
    name: Vacuum Error Count
    min: 0
    max: 10
    step: 1

sensor:
  - platform: template
    sensors:
      vacuum_cleaner_error_sensor:
        friendly_name: Vacuum Cleaner Error Sensor
        value_template: >-
          {% if states.vacuum.xiaomi_vacuum_cleaner.attributes.error is defined %}
            {{states.vacuum.xiaomi_vacuum_cleaner.attributes.error}}
          {% else %}
            No Error
          {% endif %}
      vacuum_cleaner_status:
        friendly_name: Vacuum Cleaner Status
        value_template: "{{ states.vacuum.xiaomi_vacuum_cleaner.state }}"
      vacuum_filter_timer:
        friendly_name: Vacuum Filter Timer
        value_template: "{{ states.vacuum.xiaomi_vacuum_cleaner.attributes.filter_left }}"
        unit_of_measurement: hours
      vacuum_main_brush_timer:
        friendly_name: Vacuum Main Brush Timer
        value_template: "{{ states.vacuum.xiaomi_vacuum_cleaner.attributes.main_brush_left }}"
        unit_of_measurement: hours
      vacuum_side_brush_timer:
        friendly_name: Vacuum Side Brush Timer
        value_template: "{{ states.vacuum.xiaomi_vacuum_cleaner.attributes.side_brush_left }}"
        unit_of_measurement: hours
      vacuum_sensor_timer:
        friendly_name: Vacuum Sensor Timer
        value_template: "{{ states.vacuum.xiaomi_vacuum_cleaner.attributes.sensor_dirty_left }}"
        unit_of_measurement: hours
      vacuum_cleaning_time:
        friendly_name: Vacuum Cleaning Time
        value_template: "{{ states.vacuum.xiaomi_vacuum_cleaner.attributes.cleaning_time }}"
        unit_of_measurement: minutes

vacuum:
  - platform: xiaomi_miio
    host: 192.168.1.186
    token: !secret vacuum_token

timer:
  vacuum_error_timer:
    duration: "00:03:00"

automation:
  - id: DailyVacuumStart
    alias: "Daily Vacuum Start"
    initial_state: on
    trigger:
      platform: template
      value_template: "{{ states.sensor.time.state == states.input_datetime.vacuum_start_time.state[0:5] }}"
    condition:
      condition: state
      entity_id: input_boolean.vacuum_auto_start
      state: 'on'
    action:
      - service: vacuum.start
        entity_id: vacuum.xiaomi_vacuum_cleaner
      - service: input_boolean.turn_on
        entity_id: input_boolean.empty_bin

  - id: EmptyBinNotification
    alias: "Empty Bin Notification"
    initial_state: on
    trigger:
      platform: template
      value_template: "{{ states.vacuum.xiaomi_vacuum_cleaner.attributes.battery_level >= 95 }}"
    condition:
      condition: and
      conditions:
        - condition: template
          value_template: "{{ states.vacuum.xiaomi_vacuum_cleaner.attributes.status == 'Charging' }}"
        - condition: state
          entity_id: input_boolean.empty_bin
          state: 'on'
    action:
      - service: tts.google_translate_say
        entity_id:
          - media_player.master_bedroom_speaker
          - media_player.kitchen_speaker
        data:
          message: 'Please empty Me Me''s trash bin.'
      - service: input_boolean.turn_off
        entity_id: input_boolean.empty_bin
      - service: notify.telegram_erin
        data:
          title: 'Mi Mi'
          message: 'Please empty my trash bin, Erin.'

  - id: VacuumStartNotification
    alias: "Vacuum Start Notification"
    initial_state: on
    trigger:
      - platform: state
        entity_id: vacuum.xiaomi_vacuum_cleaner
        to: "cleaning"
    condition:
      condition: numeric_state
      entity_id: input_number.vacuum_error_count
      below: 1
    action:
      - service: notify.telegram_nathan
        data:
          title: 'Mi Mi'
          message: 'Mi Mi has started cleaning.'
          data:
            inline_keyboard:
              - 'Stop:/stop_vacuum, Locate:/locate_vacuum'
              - 'Return Home:/home_vacuum'
      - service: notify.telegram_erin
        data:
          title: 'Mi Mi'
          message: 'Mi Mi has started cleaning.'
          data:
            inline_keyboard:
              - 'Stop:/stop_vacuum, Locate:/locate_vacuum'
              - 'Return Home:/home_vacuum'

  - id: VacuumStopNotification
    alias: "Vacuum Stop Notification"
    initial_state: on
    trigger:
      - platform: state
        entity_id: vacuum.xiaomi_vacuum_cleaner
        to: "returning"
    action:
      - service: notify.telegram_nathan
        data:
          title: 'Mi Mi'
          message: 'Mi Mi is returning to the dock.'
          data:
            inline_keyboard:
              - 'Start:/start_vacuum, Locate:/locate_vacuum'
              - 'Return Home:/home_vacuum'
      - service: notify.telegram_erin
        data:
          title: 'Mi Mi'
          message: 'Mi Mi is returning to the dock.'
          data:
            inline_keyboard:
              - 'Start:/start_vacuum, Locate:/locate_vacuum'
              - 'Return Home:/home_vacuum'

  - id: VacuumErrorNotification
    alias: "Vacuum Error Notification"
    initial_state: on
    trigger:
      - platform: template
        value_template: >-
          {% if is_state('sensor.vacuum_cleaner_error_sensor', 'No Error') %}
            false
          {% else %}
            true
          {% endif %}
    condition:
      condition: template
      value_template: >-
        {% if is_state('sensor.vacuum_cleaner_error_sensor','Clean main brush') %}
          false
        {% else %}
          true
        {% endif %}
    action:
      - service: notify.telegram_nathan
        data_template:
          title: 'Mi Mi'
          message: 'Mi Mi has an error: {{ states.sensor.vacuum_cleaner_error_sensor.state }}.'
          data:
            inline_keyboard:
              - 'Start:/start_vacuum, Locate:/locate_vacuum'
              - 'Return Home:/home_vacuum'
      - service: notify.telegram_erin
        data_template:
          title: 'Mi Mi'
          message: 'Mi Mi has an error: {{ states.sensor.vacuum_cleaner_error_sensor.state }}.'
          data:
            inline_keyboard:
              - 'Start:/start_vacuum, Locate:/locate_vacuum'
              - 'Return Home:/home_vacuum'

  - id: FirstVacuumCleanBrushError
    alias: "First Vacuum Clean Brush Error"
    initial_state: on
    trigger:
      - platform: state
        entity_id: sensor.vacuum_cleaner_error_sensor
        to: Clean main brush
    condition:
      condition: numeric_state
      entity_id: input_number.vacuum_error_count
      below: 1
    action:
      - service: timer.start
        data:
          entity_id: timer.vacuum_error_timer
      - service: input_number.increment
        entity_id: input_number.vacuum_error_count
      - service: vacuum.start
        entity_id: vacuum.xiaomi_vacuum_cleaner

  - id: SecondVacuumCleanBrushError
    alias: "Second Vacuum Clean Brush Error"
    initial_state: on
    trigger:
      - platform: state
        entity_id: sensor.vacuum_cleaner_error_sensor
        to: Clean main brush
    condition:
      condition: numeric_state
      entity_id: input_number.vacuum_error_count
      above: 0
      below: 3
    action:
      - service: input_number.increment
        entity_id: input_number.vacuum_error_count
      - service: vacuum.start
        entity_id: vacuum.xiaomi_vacuum_cleaner

  - id: FinalVacuumCleanBrushError
    alias: "Final Vacuum Clean Brush Error"
    initial_state: on
    trigger:
      - platform: state
        entity_id: sensor.vacuum_cleaner_error_sensor
        to: Clean main brush
    condition:
      condition: numeric_state
      entity_id: input_number.vacuum_error_count
      above: 2
      below: 4
    action:
      - service: timer.cancel
        entity_id: timer.vacuum_error_timer
      - service: input_number.set_value
        data:
          entity_id: input_number.vacuum_error_count
          value: 0
      - service: notify.telegram_nathan
        data_template:
          title: 'Mi Mi'
          message: 'Mi Mi has an error: {{ states.sensor.vacuum_cleaner_error_sensor.state }}.'
          data:
            inline_keyboard:
              - 'Start:/start_vacuum, Locate:/locate_vacuum'
              - 'Return Home:/home_vacuum'
      - service: notify.telegram_erin
        data_template:
          title: 'Mi Mi'
          message: 'Mi Mi has an error: {{ states.sensor.vacuum_cleaner_error_sensor.state }}.'
          data:
            inline_keyboard:
              - 'Start:/start_vacuum, Locate:/locate_vacuum'
              - 'Return Home:/home_vacuum'

  - id: VacuumErrorTimerEnds
    alias: "VacuumErrorTimerEnds"
    initial_state: on
    trigger:
      - platform: event
        event_type: timer.finished
        event_data:
          entity_id: timer.vacuum_error_timer
    action:
      - service: input_number.set_value
        data:
          entity_id: input_number.vacuum_error_count
          value: 0

  
  - id: VacuumStopCleaningActionClicked
    alias: "Vacuum Stop Cleaning Action Clicked"
    initial_state: on
    trigger:
      - platform: event
        event_type: telegram_callback
        event_data:
          data: '/stop_vacuum'
    action:
      - service: vacuum.stop
        entity_id: vacuum.xiaomi_vacuum_cleaner
      - service: telegram_bot.answer_callback_query
        data_template:
          callback_query_id: '{{ trigger.event.data.id }}'
          message: 'Stopping vacuum.'

  - id: VacuumReturnHomeActionClicked
    alias: "Vacuum Return Home Action Clicked"
    initial_state: on
    trigger:
      - platform: event
        event_type: telegram_callback
        event_data:
          data: '/home_vacuum'
    action:
      - service: vacuum.return_to_base
        entity_id: vacuum.xiaomi_vacuum_cleaner
      - service: telegram_bot.answer_callback_query
        data_template:
          callback_query_id: '{{ trigger.event.data.id }}'
          message: 'Sending vacuum home.'

  - id: VacuumResumeCleaningActionClicked
    alias: "Vacuum Resume Cleaning Action Clicked"
    initial_state: on
    trigger:
      - platform: event
        event_type: telegram_callback
        event_data:
          data: '/start_vacuum'
    action:
      - service: vacuum.start
        entity_id: vacuum.xiaomi_vacuum_cleaner
      - service: telegram_bot.answer_callback_query
        data_template:
          callback_query_id: '{{ trigger.event.data.id }}'
          message: 'Starting vacuum.'

  - id: VacuumLocateActionClicked
    alias: "Vacuum Locate Action Clicked"
    initial_state: on
    trigger:
      - platform: event
        event_type: telegram_callback
        event_data:
          data: '/locate_vacuum'
    action:
      - service: vacuum.locate
        entity_id: vacuum.xiaomi_vacuum_cleaner
      - service: telegram_bot.answer_callback_query
        data_template:
          callback_query_id: '{{ trigger.event.data.id }}'
          message: 'Locating vacuum.'

  - id: ResetVacuumSensorTimer
    alias: "Reset Vacuum Sensor Timer"
    initial_state: on
    trigger:
      - platform: state
        entity_id: input_boolean.vacuum_sensor_timer_reset
        to: "on"
      - platform: event
        event_type: telegram_callback
        event_data:
          data: '/reset_sensor_timer'
    action:
      - service: input_boolean.turn_off
        entity_id: input_boolean.vacuum_sensor_timer_reset
      - service: vacuum.send_command
        data:
          entity_id: vacuum.xiaomi_vacuum_cleaner
          command: reset_consumable
          params: sensor_dirty_time
      - service: telegram_bot.answer_callback_query
        data_template:
          callback_query_id: '{{ trigger.event.data.id }}'
          message: 'Resetting sensor timer.'

  - id: CleanSensorNotification
    alias: "Clean Vacuum Sensors Notification"
    initial_state: on
    trigger:
      - platform: template
        value_template: >-
          {% if states.sensor.vacuum_sensor_timer.state | float <= 0 %}
          true
          {% else %}
          false
          {% endif %}
    action:
      - service: notify.telegram_nathan
        data:
          title: 'Mi Mi'
          message: 'Time to clean Mi Mi''s sensors.'
          data:
            inline_keyboard:
              - 'Reset sensor timer:/reset_sensor_timer'
              - 'Stop:/stop_vacuum, Locate:/locate_vacuum'
              - 'Return Home:/home_vacuum'
      - service: notify.telegram_erin
        data:
          title: 'Mi Mi'
          message: 'Mi Mi is returning to the dock.'
          data:
            inline_keyboard:
              - 'Reset sensor timer:/reset_sensor_timer'
              - 'Stop:/stop_vacuum, Locate:/locate_vacuum'
              - 'Return Home:/home_vacuum'

  - id: ResetVacuumMainBrushTime
    alias: "Reset Vacuum Main Brush Time"
    initial_state: on
    trigger:
      - platform: state
        entity_id: input_boolean.vacuum_main_brush_reset
        to: "on"
      - platform: event
        event_type: telegram_callback
        event_data:
          data: '/reset_main_brush_timer'
    action:
      - service: vacuum.send_command
        data:
          entity_id: vacuum.xiaomi_vacuum_cleaner
          command: reset_consumable
          params: main_brush_work_time
      - service: input_boolean.turn_off
        entity_id: input_boolean.vacuum_main_brush_reset
      - service: telegram_bot.answer_callback_query
        data_template:
          callback_query_id: '{{ trigger.event.data.id }}'
          message: 'Resetting main brush timer.'

  - id: ResetVacuumSideBrushTime
    alias: "Reset Vacuum Side Brush Time"
    initial_state: on
    trigger:
      - platform: state
        entity_id: input_boolean.vacuum_side_brush_reset
        to: "on"
      - platform: event
        event_type: telegram_callback
        event_data:
          data: '/reset_side_brush_timer'
    action:
      - service: vacuum.send_command
        data:
          entity_id: vacuum.xiaomi_vacuum_cleaner
          command: reset_consumable
          params: side_brush_work_time
      - service: input_boolean.turn_off
        entity_id: input_boolean.vacuum_side_brush_reset
      - service: telegram_bot.answer_callback_query
        data_template:
          callback_query_id: '{{ trigger.event.data.id }}'
          message: 'Resetting side brush timer.'

  - id: ResetVacuumFilterTime
    alias: "Reset Vacuum Filter Time"
    initial_state: on
    trigger:
      - platform: state
        entity_id: input_boolean.vacuum_filter_reset
        to: "on"
      - platform: event
        event_type: telegram_callback
        event_data:
          data: '/reset_filter_timer'
    action:
      - service: vacuum.send_command
        data:
          entity_id: vacuum.xiaomi_vacuum_cleaner
          command: reset_consumable
          params: filter_work_time
      - service: input_boolean.turn_off
        entity_id: input_boolean.vacuum_filter_reset
      - service: telegram_bot.answer_callback_query
        data_template:
          callback_query_id: '{{ trigger.event.data.id }}'
          message: 'Resetting filter timer.'

  - id: ReplaceMainBrushNotification
    alias: "Replace Main Brush Notification"
    initial_state: on
    trigger:
      - platform: template
        value_template: >-
          {% if states.sensor.vacuum_main_brush_timer.state | float <= 0 %}
          true
          {% else %}
          false
          {% endif %}
    action:
      - service: notify.telegram_nathan
        data:
          title: 'Mi Mi'
          message: 'Time to replace Mi Mi''s main brush.'
          data:
            inline_keyboard:
              - 'Reset main brush timer:/reset_main_brush_timer'
              - 'Stop:/stop_vacuum, Locate:/locate_vacuum'
              - 'Return Home:/home_vacuum'
      - service: notify.telegram_erin
        data:
          title: 'Mi Mi'
          message: 'Time to replace Mi Mi''s main brush.'
          data:
            inline_keyboard:
              - 'Reset main brush timer:/reset_main_brush_timer'
              - 'Stop:/stop_vacuum, Locate:/locate_vacuum'
              - 'Return Home:/home_vacuum'

  - id: ReplaceSideBrushNotification
    alias: "Replace Side Brush Notification"
    initial_state: on
    trigger:
      - platform: template
        value_template: >-
          {% if states.sensor.vacuum_side_brush_timer.state | float <= 0 %}
          true
          {% else %}
          false
          {% endif %}
    action:
      - service: notify.telegram_nathan
        data:
          title: 'Mi Mi'
          message: 'Time to replace Mi Mi''s side brush.'
          data:
            inline_keyboard:
              - 'Reset side brush timer:/reset_side_brush_timer'
              - 'Stop:/stop_vacuum, Locate:/locate_vacuum'
              - 'Return Home:/home_vacuum'
      - service: notify.telegram_erin
        data:
          title: 'Mi Mi'
          message: 'Time to replace Mi Mi''s side brush.'
          data:
            inline_keyboard:
              - 'Reset side brush timer:/reset_side_brush_timer'
              - 'Stop:/stop_vacuum, Locate:/locate_vacuum'
              - 'Return Home:/home_vacuum'

  - id: ReplaceFilterNotification
    alias: "Replace Filter Notification"
    initial_state: on
    trigger:
      - platform: template
        value_template: >-
          {% if states.sensor.vacuum_filter_timer.state | float <= 0 %}
          true
          {% else %}
          false
          {% endif %}
    action:
      - service: notify.telegram_nathan
        data:
          title: 'Mi Mi'
          message: 'Time to replace Mi Mi''s filter.'
          data:
            inline_keyboard:
              - 'Reset filter timer:/reset_filter_timer'
              - 'Stop:/stop_vacuum, Locate:/locate_vacuum'
              - 'Return Home:/home_vacuum'
      - service: notify.telegram_erin
        data:
          title: 'Mi Mi'
          message: 'Time to replace Mi Mi''s filter.'
          data:
            inline_keyboard:
              - 'Reset filter timer:/reset_filter_timer'
              - 'Stop:/stop_vacuum, Locate:/locate_vacuum'
              - 'Return Home:/home_vacuum'
